apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: data-transformation
  namespace: mnist
spec:
  template:
    spec:
      containers:
        - image: quay.io/alegros/mnist-serverless-fn:v2
          name: serverless-function
          env:
            - name: INFERENCE_ENDPOINT
              value: "http://modelmesh-serving:8008/v2/models/mnist/infer"
            - name: USE_OAUTH_PROXY
              value: "true"
            - name: OAUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: "model-mesh"
                  key: token
                  optional: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mnist-webapp
  namespace: mnist
  labels:
    app: mnist-webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mnist-webapp
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: mnist-webapp
    spec:
      containers:
      - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KNATIVE_SVC
          value: data-transformation.$(NAMESPACE).svc.cluster.local
        image: quay.io/alegros/mnist-webapp:v2
        imagePullPolicy: Always
        name: mnist-webapp
        ports:
        - containerPort: 8080
          protocol: TCP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: mnist-webapp
  namesapce: mnist
  labels:
    app: mnist-webapp
spec:
  port:
    targetPort: 8080 
  to:
    kind: Service
    name: mnist-webapp
---
apiVersion: v1
kind: Service
metadata:
  name: mnist-webapp
  namespace: mnist
  labels:
    app: mnist-webapp
spec:
  selector:
    app: mnist-webapp
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080