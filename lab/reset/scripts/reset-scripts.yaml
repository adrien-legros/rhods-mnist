kind: ConfigMap
apiVersion: v1
metadata:
  name: reset-scripts
data:
  reset-minio.sh: |-
    #!/usr/bin/env sh
    # Create bucket
    mc alias set minio ${MINIO_ENDPOINT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
    if [ $? -gt 0 ]; then exit 1; fi
    buckets=$(mc ls minio --json | jq '.key' | sed 's/\"//g')
    for buck in ${buckets}
    do
      echo "Removing bucket ${buck} ..."
      mc rb --force minio/${buck}
    done
    echo "Deletion phase completed"
    echo "Creating bucket rhods on minio alias ..."
    mc mb minio/rhods
    curl -LJ ${MNIST_DATASET} -o /tmp/dataset.tar.gz
    mkdir /tmp/dataset
    tar xzf /tmp/dataset.tar.gz -C /tmp/dataset --strip-components 1
    unzip /tmp/dataset/digit-recognizer.zip -d /tmp/dataset
    mc cp /tmp/dataset/train.csv minio/rhods/data/train.csv
    mc cp /tmp/dataset/test.csv minio/rhods/data/test.csv
    echo "Creation completed"
  reset-mariadb.sh: |-
    #!/usr/bin/env sh
    oc -n mnist exec -it deploy/mariadb-${DSP_INSTANCE_NAME} -- mysql -h 127.0.0.1 -u mlpipeline -p${MARIADB_PWD} -D mlpipeline -e 'drop database mlpipeline';
    oc -n mnist exec -it deploy/mariadb-${DSP_INSTANCE_NAME} -- mysql -h 127.0.0.1 -u mlpipeline -p${MARIADB_PWD} -e 'create database mlpipeline';
  reset-jupyterlab.sh: |-
    #!/usr/bin/env sh
    for sts in $(oc -n mnist get sts -oname)
    do 
      oc -n mnist exec -it $sts -- /bin/sh -c "rm -rf *";
    done
  redeploy-ds-pipeline.sh: |-
    #!/usr/bin/env sh
    oc -n mnist get deploy -oname | grep ds-pipeline | xargs oc rollout restart
    oc -n mnist rollout restart deploy/mariadb-${DSP_INSTANCE_NAME}
    oc -n mnist rollout restart deploy/minio-${DSP_INSTANCE_NAME}
    oc -n mnist delete taskrun --all
  clear-mnist-namespace.sh: |-
    #!/usr/bin/env sh
    oc -n mnist delete notebook --all
    oc -n mnist delete isvc --all
    oc -n mnist delete servingruntimes --all
    oc -n mnist delete ksvc --all
    oc -n mnist delete all -l app=mnist-webapp
    oc -n mnist delete po -l component=data-science-pipelines